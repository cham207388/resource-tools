import stomp


class MyListener(stomp.ConnectionListener):
    def on_error(self, frame):
        print(f'Error: {frame.body}')

    def on_message(self, frame):
        print(f'Received message: {frame.body}')
# ---
import stomp
import os

from .listener import MyListener


class ActiveMQ:
    def __init__(self):
        self.host = os.getenv("ACTIVEMQ_HOST")
        self.port = os.getenv("ACTIVEMQ_PORT")
        self.username = os.getenv("ACTIVEMQ_USER")
        self.password = os.getenv("ACTIVEMQ_PASSWORD")
        self.connection = stomp.Connection([(self.host, self.port)])

    def connect(self):
        self.connection.set_listener('', MyListener())
        self.connection.connect(self.username, self.password, wait=True)
        return self.connection
# ---
import logging
import time
from active_mq.active_setup import ActiveMQ


class Consumer:

    logger = logging.getLogger(__name__)

    def __init__(self, queue: str, active_mq: ActiveMQ):
        self.queue = queue
        self.active_mq = active_mq
        self.connection = self.active_mq.connect()

    def consume(self):
        self.connection.subscribe(destination=self.queue, id=1, ack='auto')
        self.logger.info("Waiting for message...")
        try:
            while True:
                time.sleep(1)
        except KeyboardInterrupt:
            self.connection.disconnect()

from active_mq.active_setup import ActiveMQ


class Producer:
    def __init__(self, queue_name: str, active_mq: ActiveMQ):
        self.queue = queue_name
        self.active_mq = active_mq
        self.connection = self.active_mq.connect()

    def produce(self, message):
        self.connection.send(body=message, destination=self.queue)
        self.connection.disconnect()
